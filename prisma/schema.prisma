// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Events {
  id            String          @id @default(uuid())
  name          String
  date          DateTime
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  subscriptions Subscriptions[]
  donations     Donations?

  @@map("events")
}

model Participants {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  date_of_birth DateTime
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  subscriptions Subscriptions[]

  @@map("participants")
}

model Subscriptions {
  id             String   @id @default(uuid())
  participant_id String
  event_id       String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  event       Events       @relation(fields: [event_id], references: [id])
  participant Participants @relation(fields: [participant_id], references: [id])

  @@map("subscriptions")
}

model Donations {
  id         String   @id @default(uuid())
  event_id   String   @unique
  goal       Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  event    Events     @relation(fields: [event_id], references: [id])
  Payments Payments[]

  @@map("donations")
}

model Contributors {
  id         String     @id @default(uuid())
  first_name String
  last_name  String
  email      String     @unique
  member     Boolean
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  Payments   Payments[]

  @@map("contributors")
}

model Payments {
  id             String   @id @default(uuid())
  amount         Float
  donation_id    String
  contributor_id String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  donation    Donations    @relation(fields: [donation_id], references: [id])
  contributor Contributors @relation(fields: [contributor_id], references: [id])

  @@map("payments")
}

model Users {
  id         String   @id @default(uuid())
  first_name String
  last_name  String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("users")
}
